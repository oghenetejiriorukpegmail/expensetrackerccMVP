IyBFeHBlbnNlIFRyYWNrZXIgTVZQCgpBIGNvbXByZWhlbnNpdmUgZXhwZW5zZSB0cmFja2luZyBh
cHBsaWNhdGlvbiBidWlsdCB3aXRoIE51eHQgMywgU3VwYWJhc2UsIGFuZCBWdWUuanMuCgojIyBG
ZWF0dXJlcwoKLSAqKlVzZXIgQXV0aGVudGljYXRpb24qKjogU2VjdXJlIGxvZ2luIGFuZCByZWdp
c3RyYXRpb24gd2l0aCBTdXBhYmFzZSBBdXRoCi0gKipUcmlwIE1hbmFnZW1lbnQqKjogQ3JlYXRl
IGFuZCBtYW5hZ2UgYnVzaW5lc3MgdHJpcHMKLSAqKkV4cGVuc2UgVHJhY2tpbmcqKjogTG9nIGFu
ZCBjYXRlZ29yaXplIGV4cGVuc2VzIHdpdGggcmVjZWlwdCB1cGxvYWRzCi0gKipNaWxlYWdlIFRy
YWNraW5nKio6IFRyYWNrIHRyYXZlbCBkaXN0YW5jZXMgYW5kIGFzc29jaWF0ZWQgY29zdHMKLSAq
KlJlY2VpcHQgUHJvY2Vzc2luZyoqOiBBSS1wb3dlcmVkIHJlY2VpcHQgZGF0YSBleHRyYWN0aW9u
Ci0gKipEYXRhIFZpc3VhbGl6YXRpb24qKjogRGFzaGJvYXJkIHdpdGggZXhwZW5zZSBzdW1tYXJp
ZXMgYW5kIGNoYXJ0cwotICoqRXhwb3J0IEZ1bmN0aW9uYWxpdHkqKjogR2VuZXJhdGUgcmVwb3J0
cyBpbiB2YXJpb3VzIGZvcm1hdHMKCiMjIFRlY2ggU3RhY2sKCi0gKipGcm9udGVuZCoqOiBOdXh0
IDMsIFZ1ZS5qcywgVGFpbHdpbmRDU1MKLSAqKkJhY2tlbmQqKjogU3VwYWJhc2UgKFBvc3RncmVT
UUwsIEF1dGgsIFN0b3JhZ2UpCi0gKipBSSBJbnRlZ3JhdGlvbioqOiBHb29nbGUgRG9jdW1lbnQg
QUkgZm9yIHJlY2VpcHQgcHJvY2Vzc2luZwotICoqU3RhdGUgTWFuYWdlbWVudCoqOiBQaW5pYQot
ICoqU3R5bGluZyoqOiBUYWlsd2luZENTUwoKIyMgSW5zdGFsbGF0aW9uCgoxLiBDbG9uZSB0aGUg
cmVwb3NpdG9yeToKICAgYGBgYmFzaAogICBnaXQgY2xvbmUgaHR0cHM6Ly9naXRodWIuY29tL29n
aGVuZXRlamlyaW9ydWtwZWdtYWlsL2V4cGVuc2V0cmFja2VyY2NNVlAuZ2l0CiAgIGNkIGV4cGVu
c2V0cmFja2VyY2NNVlAKICAgYGBgCgoyLiBJbnN0YWxsIGRlcGVuZGVuY2llczoKICAgYGBgYmFz
aAogICBucG0gaW5zdGFsbAogICBgYGAKCjMuIENvbmZpZ3VyZSBlbnZpcm9ubWVudCB2YXJpYWJs
ZXM6CiAgIENyZWF0ZSBhIGAuZW52YCBmaWxlIHdpdGggdGhlIGZvbGxvd2luZyB2YXJpYWJsZXM6
CiAgIGBgYAogICBTVVBBQkFTRV9VUkw9eW91cl9zdXBhYmFzZV91cmwKICAgU1VQQUJBU0VfQU5P
Tl9LRVk9eW91cl9zdXBhYmFzZV9hbm9uX2tleQogICBTVVBBQkFTRV9TRVJWSUNFX0tFWT15b3Vy
X3N1cGFiYXNlX3NlcnZpY2Vfa2V5CiAgIEdPT0dMRV9BUElfS0VZPXlvdXJfZ29vZ2xlX2FwaV9r
ZXkKICAgR09PR0xFX1BST0pFQ1RfSUQ9eW91cl9nb29nbGVfcHJvamVjdF9pZAogICBHT09HTEVf
UFJPQ0VTU09SX0lEPXlvdXJfZ29vZ2xlX3Byb2Nlc3Nvcl9pZAogICBgYGAKCjQuIFJ1biB0aGUg
ZGV2ZWxvcG1lbnQgc2VydmVyOgogICBgYGBiYXNoCiAgIG5wbSBydW4gZGV2CiAgIGBgYAoKIyMg
RGF0YWJhc2UgU2V0dXAKClRoZSBhcHBsaWNhdGlvbiByZXF1aXJlcyBhIFN1cGFiYXNlIGRhdGFi
YXNlIHdpdGggc3BlY2lmaWMgdGFibGVzIGFuZCBSTFMgcG9saWNpZXMuIFNlZSBbUkVBRE1FLVNU
T1JBR0UtRklYLm1kXSguL1JFQURNRS1TVE9SQUdFLUZJWC5tZCkgZm9yIGRldGFpbGVkIFNRTCBz
ZXR1cCBpbnN0cnVjdGlvbnMuCgojIyBQcm9qZWN0IFN0cnVjdHVyZQoKLSBgYXNzZXRzL2A6IENT
UyBhbmQgc3RhdGljIGFzc2V0cwotIGBjb21wb25lbnRzL2A6IFZ1ZSBjb21wb25lbnRzCi0gYGNv
bXBvc2FibGVzL2A6IFZ1ZSBjb21wb3NhYmxlcwotIGBsYXlvdXRzL2A6IEFwcGxpY2F0aW9uIGxh
eW91dHMKLSBgbWlkZGxld2FyZS9gOiBOdXh0IG1pZGRsZXdhcmUKLSBgcGFnZXMvYDogQXBwbGlj
YXRpb24gcm91dGVzCi0gYHBsdWdpbnMvYDogTnV4dCBwbHVnaW5zCi0gYHB1YmxpYy9gOiBQdWJs
aWMgc3RhdGljIGZpbGVzCi0gYHNlcnZlci9gOiBTZXJ2ZXItc2lkZSBjb2RlCi0gYHN0b3Jlcy9g
OiBQaW5pYSBzdG9yZXMKLSBgdXRpbHMvYDogVXRpbGl0eSBmdW5jdGlvbnMKCiMjIEtleSBGaWxl
cwoKLSBgYXBwLnZ1ZWA6IE1haW4gYXBwbGljYXRpb24gY29tcG9uZW50Ci0gYG51eHQuY29uZmln
LnRzYDogTnV4dCBjb25maWd1cmF0aW9uCi0gYHN0b3Jlcy91c2VyU3RvcmUudHNgOiBVc2VyIGF1
dGhlbnRpY2F0aW9uIGFuZCBwcm9maWxlIG1hbmFnZW1lbnQKLSBgc3RvcmVzL3RyaXBTdG9yZS50
c2A6IFRyaXAgbWFuYWdlbWVudAotIGBzdG9yZXMvZXhwZW5zZVN0b3JlLnRzYDogRXhwZW5zZSBt
YW5hZ2VtZW50Ci0gYHV0aWxzL2FpLXByb2Nlc3NpbmcudHNgOiBSZWNlaXB0IEFJIHByb2Nlc3Np
bmcKCiMjIE1DUCBJbnRlZ3JhdGlvbgoKVGhpcyByZXBvc2l0b3J5IGluY2x1ZGVzIEdpdEh1YiBN
Q1AgKE1vZGVsIENvbnRleHQgUHJvdG9jb2wpIHNlcnZlciBjb25maWd1cmF0aW9uIGZvciBBSSBh
c3Npc3RhbnQgaW50ZWdyYXRpb24uIFNlZSBbR0lUSFVCLU1DUC1SRUFETUUubWRdKC4vR0lUSFVC
LU1DUC1SRUFETUUubWQpIGZvciBzZXR1cCBpbnN0cnVjdGlvbnMuCgojIyBMaWNlbnNlCgpNSVQK
CiMjIENvbnRyaWJ1dG9ycwoKLSBFeHBlbnNlIFRyYWNrZXIgRGV2ZWxvcGVy
